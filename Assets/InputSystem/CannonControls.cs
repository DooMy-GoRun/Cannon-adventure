//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.2.0
//     from Assets/InputSystem/CannonControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @CannonControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @CannonControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""CannonControls"",
    ""maps"": [
        {
            ""name"": ""Cannon"",
            ""id"": ""24d35c5e-c253-49cd-bc54-83a2e4e46abb"",
            ""actions"": [
                {
                    ""name"": ""Shoot"",
                    ""type"": ""Button"",
                    ""id"": ""4f0eec29-7f2c-457b-9f71-6abbafe14cc0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""PassThrough"",
                    ""id"": ""f575008d-4a2d-43ad-b985-6e1612ca8756"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MouseX"",
                    ""type"": ""PassThrough"",
                    ""id"": ""697b6ad2-b698-440b-9522-dddbd77f176d"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MouseY"",
                    ""type"": ""PassThrough"",
                    ""id"": ""5056404a-1619-4ea4-94e1-2a927cbc0e96"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""58e0518a-53cb-4b28-8b2b-5ad8be27a254"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""2a283623-564e-44ff-932b-e86e088e7bca"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""595fc6aa-6774-468a-b5b0-c823b9bcf886"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""9e292b9a-356e-460c-898b-593c766689dd"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""cb4adce4-14f9-484c-91c1-a3ba3fe10715"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""8b57ff9f-251d-4726-853e-5a7b59e54542"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""630393db-0d6b-433c-878b-a03e65646e8e"",
                    ""path"": ""<Mouse>/delta/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseX"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3052aaf3-c98d-4e38-bc5a-72b8b309a25f"",
                    ""path"": ""<Mouse>/delta/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseY"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Cannon
        m_Cannon = asset.FindActionMap("Cannon", throwIfNotFound: true);
        m_Cannon_Shoot = m_Cannon.FindAction("Shoot", throwIfNotFound: true);
        m_Cannon_Move = m_Cannon.FindAction("Move", throwIfNotFound: true);
        m_Cannon_MouseX = m_Cannon.FindAction("MouseX", throwIfNotFound: true);
        m_Cannon_MouseY = m_Cannon.FindAction("MouseY", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Cannon
    private readonly InputActionMap m_Cannon;
    private ICannonActions m_CannonActionsCallbackInterface;
    private readonly InputAction m_Cannon_Shoot;
    private readonly InputAction m_Cannon_Move;
    private readonly InputAction m_Cannon_MouseX;
    private readonly InputAction m_Cannon_MouseY;
    public struct CannonActions
    {
        private @CannonControls m_Wrapper;
        public CannonActions(@CannonControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Shoot => m_Wrapper.m_Cannon_Shoot;
        public InputAction @Move => m_Wrapper.m_Cannon_Move;
        public InputAction @MouseX => m_Wrapper.m_Cannon_MouseX;
        public InputAction @MouseY => m_Wrapper.m_Cannon_MouseY;
        public InputActionMap Get() { return m_Wrapper.m_Cannon; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CannonActions set) { return set.Get(); }
        public void SetCallbacks(ICannonActions instance)
        {
            if (m_Wrapper.m_CannonActionsCallbackInterface != null)
            {
                @Shoot.started -= m_Wrapper.m_CannonActionsCallbackInterface.OnShoot;
                @Shoot.performed -= m_Wrapper.m_CannonActionsCallbackInterface.OnShoot;
                @Shoot.canceled -= m_Wrapper.m_CannonActionsCallbackInterface.OnShoot;
                @Move.started -= m_Wrapper.m_CannonActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_CannonActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_CannonActionsCallbackInterface.OnMove;
                @MouseX.started -= m_Wrapper.m_CannonActionsCallbackInterface.OnMouseX;
                @MouseX.performed -= m_Wrapper.m_CannonActionsCallbackInterface.OnMouseX;
                @MouseX.canceled -= m_Wrapper.m_CannonActionsCallbackInterface.OnMouseX;
                @MouseY.started -= m_Wrapper.m_CannonActionsCallbackInterface.OnMouseY;
                @MouseY.performed -= m_Wrapper.m_CannonActionsCallbackInterface.OnMouseY;
                @MouseY.canceled -= m_Wrapper.m_CannonActionsCallbackInterface.OnMouseY;
            }
            m_Wrapper.m_CannonActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Shoot.started += instance.OnShoot;
                @Shoot.performed += instance.OnShoot;
                @Shoot.canceled += instance.OnShoot;
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @MouseX.started += instance.OnMouseX;
                @MouseX.performed += instance.OnMouseX;
                @MouseX.canceled += instance.OnMouseX;
                @MouseY.started += instance.OnMouseY;
                @MouseY.performed += instance.OnMouseY;
                @MouseY.canceled += instance.OnMouseY;
            }
        }
    }
    public CannonActions @Cannon => new CannonActions(this);
    public interface ICannonActions
    {
        void OnShoot(InputAction.CallbackContext context);
        void OnMove(InputAction.CallbackContext context);
        void OnMouseX(InputAction.CallbackContext context);
        void OnMouseY(InputAction.CallbackContext context);
    }
}
